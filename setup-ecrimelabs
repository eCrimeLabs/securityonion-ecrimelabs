#!/bin/bash

. /usr/sbin/so-common

is_ip() {
            case "$*" in
                ""|*[!0-9.]*) return 1 ;;
            esac
            oldIFS=$IFS
            IFS='.'
            set -- $*
            IFS=$oldIFS
            [ $# -eq 4 ] || return 1
            for ipseg in $1 $2 $3 $4
              do
              case $ipseg in
                  *[!0-9]*) return 1 ;;
              esac
              [ $ipseg -le 255 ] || return 1
            done
}

echo
header "Welcome to the Security Onion MISP Import Wizard!"
echo

# Get responses
echo
VALID_IP="no"
while [ "$VALID_IP" = "no" ]; do
        echo "What is the ip address of your MISP instance? [x.x.x.x]"
	read ip
	is_ip $ip && VALID_IP="yes"
done
echo

echo
echo "What protocol should be used? [http/https]"
echo
echo "For security, the protocol is set as https, by default."
echo "Would you like to continue with this protocol? [yes/no]"
read yesno
if [ $yesno  = "yes" ]; then
	:
else
	echo
	echo "Which protocol would you like to use? [http/https]"
	PROTOCOL_SET="no"
	while [ $PROTOCOL_SET = "no" ]; do
		read protocol
		echo $protocol
		if [ $protocol = "http" ] || [ $protocol = "https" ] ; then
			PROTOCOL_SET="yes"
		else
			echo "Please choose a valid protocol! ('http' or 'https')" 
		fi
	done
	
fi
echo

echo
echo "Please provide an API key to access a MISP instance."
echo 
echo "You can find this information by navigating to:"
echo "https://your-misp-instance/events/automation"
read -s apikey
echo

echo
echo "Would you like to configure NIDS rules for Snort/Suricata?"
echo 
echo "Is so, please type YES below and press the ENTER key:"
echo 
read nids_rules
echo

echo
echo "Would you like to configure Intel data for Bro?"
echo 
echo "Is so, please type YES below and press the ENTER key:"
echo 
read intel
echo

if [ ! $nids_rules = "YES" ] && [ ! $intel = "YES"  ]; then
	echo "No rules or intel data selected to import.  Exiting..."
	exit 0
fi

echo "To confirm, we will configure the following:"
echo

if [ $nids_rules = "YES" ]; then
echo "NIDS Rules: /etc/nsm/rules/local.misp.rules"
fi

if [ $intel = "YES" ]; then
echo "Bro Intel: /opt/bro/share/bro/intel/misp-intel.dat"
fi
echo "IP: $ip"
echo "Protocol: $protocol"
echo "API Key: (redacted)"
echo

echo
echo "If you would like to continue, please type "YES" below and press the ENTER key:"
read confirm
echo

if [ $confirm != "YES" ]; then
        echo "Did confirm configuration...exiting..."
	echo
	exit 0
else
        #echo "Cloning GH Repo..."
	#git clone https://github.com/weslambert/securityonion-misp
	MISPCFG="/etc/misp//mispcfg"
	mkdir -p /etc/misp
        cp securityonion-misp/mispcfg $MISPCFG
	
	echo "Configuring..."
	
	# Configure download-misp with appropriate values
	sed -i "s/^IP.*/IP=\"$ip\"/" $MISPCFG
	sed -i "s/^PROTOCOL.*/PROTOCOL=\"$protocol\"/" $MISPCFG
	sed -i "s/^APIKEY.*/APIKEY=\"$apikey\"/" $MISPCFG
	sed -i "s/^INTEL=.*/INTEL=\"${intel,,}\"/" $MISPCFG
	sed -i "s/^NIDS_RULES.*/NIDS_RULES=\"${nids_rules,,}\"/" $MISPCFG
	
	# Copy misp scripts into place
	cp securityonion-misp/download-misp /usr/sbin/download-misp
	cp securityonion-misp/configure-misp /usr/sbin/configure-misp
	
	# Set perms
	chmod +x /usr/sbin/download-misp
        chmod +x /usr/sbin/configure-misp
	
	echo
	# Run configuration script 
	/usr/sbin/configure-misp	
	echo
fi
